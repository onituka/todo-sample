// Code generated by MockGen. DO NOT EDIT.
// Source: domain/tododomain/todo_repository.go

// Package mock_tododomain is a generated GoMock package.
package mock_tododomain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tododomain "github.com/onituka/todo-sample/domain/tododomain"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockRepository) CreateTodo(todo *tododomain.Todo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", todo)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockRepositoryMockRecorder) CreateTodo(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockRepository)(nil).CreateTodo), todo)
}

// DeleteTodo mocks base method.
func (m *MockRepository) DeleteTodo(todoID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", todoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockRepositoryMockRecorder) DeleteTodo(todoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockRepository)(nil).DeleteTodo), todoID)
}

// FetchAllTodo mocks base method.
func (m *MockRepository) FetchAllTodo() ([]*tododomain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllTodo")
	ret0, _ := ret[0].([]*tododomain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllTodo indicates an expected call of FetchAllTodo.
func (mr *MockRepositoryMockRecorder) FetchAllTodo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllTodo", reflect.TypeOf((*MockRepository)(nil).FetchAllTodo))
}

// FetchTodo mocks base method.
func (m *MockRepository) FetchTodo(todoID int) (*tododomain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTodo", todoID)
	ret0, _ := ret[0].(*tododomain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTodo indicates an expected call of FetchTodo.
func (mr *MockRepositoryMockRecorder) FetchTodo(todoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTodo", reflect.TypeOf((*MockRepository)(nil).FetchTodo), todoID)
}

// UpdateTodo mocks base method.
func (m *MockRepository) UpdateTodo(todo *tododomain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockRepositoryMockRecorder) UpdateTodo(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockRepository)(nil).UpdateTodo), todo)
}
